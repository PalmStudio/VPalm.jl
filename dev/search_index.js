var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = VPalm","category":"page"},{"location":"#VPalm","page":"Home","title":"VPalm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for VPalm.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [VPalm]","category":"page"},{"location":"#VPalm.mtg_skeleton-Tuple{Any}","page":"Home","title":"VPalm.mtg_skeleton","text":"mtg_skeleton(nb_leaves_emitted)\n\nMakes an MTG skeleton with nb_leaves_emitted leaves, including all intermediate organs: \n\nPlant: the whole palm\nStem: the stem of the plant, i.e. the remaining part of the plant after the leaves have been removed\nPhytomer: the part that includes the leaf and the internode\nInternodes: the part of the phytomer that is between two leaves\nLeaf: the leaf of the plant, also called frond\n\nNote: this skeleton does not include reproductive organs (inflorescences, fruits) or the scales that decompose the leaf (petiole, rachis, leaflets).\n\nArguments\n\nnb_leaves_emitted: The number of leaves to emit.\n\nExamples\n\nmtg_skeleton(3)\n\n\n\n\n\n","category":"method"},{"location":"#VPalm.read_parameters-Tuple{Any}","page":"Home","title":"VPalm.read_parameters","text":"read_parameters(file)\n\nReads a parameter file and returns the contents as an ordered dictionary.\n\nArguments\n\nfile: The path to the parameter file.\n\nReturns\n\nAn ordered dictionary containing the contents of the parameter file.\n\nExample\n\nfile = joinpath(dirname(dirname(pathof(VPalm))),\"test\",\"files\",\"parameter_file.yml\")\nread_parameters(file)\n\n\n\n\n\n","category":"method"},{"location":"#VPalm.static_mockup-Tuple{Any}","page":"Home","title":"VPalm.static_mockup","text":"static_mockup(parameters)\n\nBuilds a 3D mockup from a set of parameters. The mockup is static, i.e. it does not change over time.\n\n\n\n\n\n","category":"method"},{"location":"#VPalm.stem_bending-Tuple{Any, Any}","page":"Home","title":"VPalm.stem_bending","text":"stem_bending(stem_bending_mean, stem_bending_sd; rng=Random.MersenneTwister(1234))\n\nComputes the stem bending (°) using an average bending and a standard deviation (random draw from a normal distribution).\n\nArguments\n\nstem_bending_mean: The average stem bending (°).\nstem_bending_sd: The standard deviation of the stem bending (°).\n\nOptional arguments\n\nrng: The random number generator.\n\n\n\n\n\n","category":"method"},{"location":"#VPalm.stem_height-NTuple{6, Any}","page":"Home","title":"VPalm.stem_height","text":"stem_height(nb_leaves_emitted, initial_stem_height, stem_height_coefficient, internode_length_at_maturity, stem_growth_start)\n\nComputes the stem height (m) at a given number of leaves emitted.\n\nArguments\n\nnb_leaves_emitted: The number of leaves emitted from planting.\ninitial_stem_height: The initial stem height at planting (m).\nstem_height_coefficient: The coefficient of the exponential function.\ninternode_length_at_maturity: The internode length when the plant is mature (m).\nstem_growth_start: The number of leaves emitted at which the stem starts to grow (m). This is because the stem does not grow at the same rate at the beginning of the plant's life, \n\nbecause it first grows more in diameter than in height.\n\nstem_height_variation: The variation of the stem height (m) due to the random draw from a normal distribution.\n\nOptional arguments\n\nrng: The random number generator.\n\nDetails\n\nThe stem height is computed using an exponential function for the first stem_growth_start leaves emitted, and then a linear function for the remaining leaves emitted.\n\nNote that the stem height can also be subject to some variability using stem_height_variation, simulating natural variations that might occur in real-world scenarios, but  this variability will never make the stem height go below 30% of the intial computed height.\n\n\n\n\n\n","category":"method"},{"location":"#VPalm.write_parameters-Tuple{Any, Any}","page":"Home","title":"VPalm.write_parameters","text":"write_parameters(file, params)\n\nWrite the given parameters to a file using YAML format.\n\nArguments\n\nfile: The file path to write the parameters to.\nparams: The parameters to be written.\n\nExample\n\nfile = joinpath(dirname(dirname(pathof(VPalm))),\"test\",\"files\",\"parameter_file.yml\")\nparams = read_parameters(file)\nwrite_parameters(tempname(), params)\n\n\n\n\n\n","category":"method"}]
}
